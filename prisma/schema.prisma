// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            String   @id @default(cuid())
  title         String
  description   String
  priceCents    Int
  currencyCode  String   @default("840") // 840=USD per ISO 4217 numeric
  youtubeUrl    String?
  dropboxPath   String   // Dropbox file path accessible to the app token
  noteUrl       String?  // External note URL to purchase password
  downloadPassword String?
  approvalStatus  ProductStatus @default(PENDING)
  productType   ProductType @default(VIDEO)
  sampleImageUrls String[] @default([])
  sellerId      String?
  seller        User?    @relation(fields: [sellerId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orders        Order[]
  messages      Message[]
  salesCount    Int      @default(0)
}

model Order {
  id                  String   @id @default(cuid())
  productId           String
  product             Product  @relation(fields: [productId], references: [id])
  amountCents         Int
  currencyCode        String
  status              OrderStatus @default(PENDING)
  ccbillTransactionId String?    // set after return
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  downloadTokens      DownloadToken[]
}

model DownloadToken {
  id        String   @id @default(cuid())
  token     String   @unique
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
}

model User {
  id                   String   @id @default(cuid())
  username             String   @unique
  password             String?
  dropboxAccessToken   String?
  paypalEmail          String?
  preferredLanguage    String?
  role                 UserRole @default(SELLER)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  products             Product[]
  payouts              Payout[]
}

enum UserRole {
  ADMIN
  SELLER
}

enum ProductStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ProductType {
  VIDEO
  IMAGE
}

model Message {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  senderId    String
  recipientId String
  body        String
  createdAt   DateTime @default(now())
}

model Payout {
  id           String        @id @default(cuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  amountCents  Int
  status       PayoutStatus  @default(PAID)
  createdAt    DateTime      @default(now())
  paidAt       DateTime?
}

enum PayoutStatus {
  PAID
  CANCELLED
}
